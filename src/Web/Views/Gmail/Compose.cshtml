@model ChatbotApi.Web.Controllers.ComposeEmailModel
@{
    ViewData["Title"] = "Compose Email";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-envelope me-2"></i>
                        Compose Email via Gmail
                    </h4>
                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="revokeAuthorization()">
                        <i class="fas fa-times me-1"></i>
                        Revoke Access
                    </button>
                </div>
                <div class="card-body">
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <form asp-action="Compose" method="post" id="composeForm">
                        <div class="mb-3">
                            <label asp-for="To" class="form-label">
                                <i class="fas fa-at me-1"></i>
                                To
                            </label>
                            <input asp-for="To" class="form-control" type="email" placeholder="recipient@example.com"
                                required />
                            <span asp-validation-for="To" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Subject" class="form-label">
                                <i class="fas fa-tag me-1"></i>
                                Subject
                            </label>
                            <input asp-for="Subject" class="form-control" placeholder="Enter email subject" required />
                            <span asp-validation-for="Subject" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Body" class="form-label">
                                <i class="fas fa-edit me-1"></i>
                                Message
                            </label>
                            <textarea asp-for="Body" class="form-control" rows="10"
                                placeholder="Enter your message here..." required></textarea>
                            <span asp-validation-for="Body" class="text-danger"></span>
                            <div class="form-text">
                                You can use HTML formatting in your message.
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary" id="sendBtn">
                                <i class="fas fa-paper-plane me-2"></i>
                                Send Email
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="clearForm()">
                                <i class="fas fa-eraser me-2"></i>
                                Clear
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-info-circle me-2"></i>
                        Gmail API Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Permissions Granted:</h6>
                            <ul class="list-unstyled">
                                <li><i class="fas fa-check text-success me-2"></i>Compose emails</li>
                                <li><i class="fas fa-check text-success me-2"></i>Send emails</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Authorization Status:</h6>
                            <div id="authStatus" class="badge bg-success">
                                <i class="fas fa-check me-1"></i>
                                Authorized
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function clearForm() {
        document.getElementById('composeForm').reset();
    }

    function revokeAuthorization() {
        if (confirm('Are you sure you want to revoke Gmail access? You will need to re-authorize to send emails.')) {
            fetch('@Url.Action("RevokeAuthorization")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        alert(data.message);
                        if (data.message.includes('successfully')) {
                            window.location.href = '@Url.Action("Authorize")';
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while revoking authorization.');
                });
        }
    }

    // Check authorization status on page load
    document.addEventListener('DOMContentLoaded', function () {
        fetch('@Url.Action("IsAuthorized")')
            .then(response => response.json())
            .then(data => {
                const statusElement = document.getElementById('authStatus');
                if (data.isAuthorized) {
                    statusElement.className = 'badge bg-success';
                    statusElement.innerHTML = '<i class="fas fa-check me-1"></i>Authorized';
                } else {
                    statusElement.className = 'badge bg-danger';
                    statusElement.innerHTML = '<i class="fas fa-times me-1"></i>Not Authorized';
                    window.location.href = '@Url.Action("Authorize")';
                }
            })
            .catch(error => {
                console.error('Error checking authorization:', error);
            });
    });
</script>